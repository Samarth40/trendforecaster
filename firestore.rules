rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasUserId(data) {
      return data.userId == request.auth.uid;
    }

    // User data collection
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read, update: if isOwner(userId);
      allow delete: if false;
    }

    // User stats collection
    match /userStats/{userId} {
      allow create, read, write, update: if isAuthenticated() && request.auth.uid == userId;
      allow get: if isAuthenticated() && request.auth.uid == userId;
      allow list: if isAuthenticated() && request.auth.uid == userId;
    }

    // Saved ideas collection
    match /savedIdeas/{ideaId} {
      allow read: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/savedIdeas/$(ideaId)) ||
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow list: if isAuthenticated() && request.query.limit <= 100;
    }

    // Trends collection
    match /trends/{trendId} {
      allow read: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/trends/$(trendId)) ||
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow list: if isAuthenticated();
      allow get: if isAuthenticated();
    }

    // Trend activities collection
    match /trendActivities/{activityId} {
      allow read: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/trendActivities/$(activityId)) ||
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow list: if isAuthenticated();
    }

    // Content ideas collection
    match /contentIdeas/{ideaId} {
      allow read: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/contentIdeas/$(ideaId)) ||
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow list: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // User engagement collection
    match /userEngagement/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow get: if isAuthenticated() && request.auth.uid == userId;
      allow list: if isAuthenticated() && request.auth.uid == userId;
    }

    // Add rules for real-time updates
    match /userStats/{userId}/updates/{updateId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
      allow list: if isAuthenticated() && request.auth.uid == userId;
    }

    // Add rules for user activity tracking
    match /userActivity/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
      allow list: if isAuthenticated() && request.auth.uid == userId;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 